<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Weekly Completion Percentage</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body { font-family: sans-serif; margin: 20px; }
    h1 { text-align: center; margin-bottom: 2rem; }
    .chart-container { width: 100%; max-width: 800px; margin: auto; }
  </style>
</head>
<body>
  <h1>Room Completion - Last 10 Weeks</h1>
  <div class="chart-container">
    <canvas id="completionChart"></canvas>
  </div>

  <script>
    const apiKey = '5b9a10e2092947d49dac84004ad149a2';
    const formId = '250955404825056';
    const roomFieldId = '18';

    async function fetchSubmissions() {
      const response = await fetch(`https://api.jotform.com/form/${formId}/submissions?apiKey=${apiKey}&limit=1000`);
      const data = await response.json();
      return data.content || [];
    }

    function getMonday(date) {
      const d = new Date(date);
      const day = d.getDay();
      const diff = (day === 0 ? -6 : 1) - day;
      d.setHours(0, 0, 0, 0);
      d.setDate(d.getDate() + diff);
      return d;
    }

    function addDays(date, days) {
      const d = new Date(date);
      d.setDate(d.getDate() + days);
      return d;
    }

    async function buildChart() {
      const submissions = await fetchSubmissions();
      const weeks = [];
      const now = new Date();

      for (let i = 9; i >= 0; i--) {
        const monday = getMonday(new Date(now.getFullYear(), now.getMonth(), now.getDate() - i * 7));
        const sunday = addDays(monday, 6);
        weeks.push({ label: monday.toLocaleDateString(), monday, sunday, total: 0, completed: 0 });
      }

      const roomMap = {};
      for (const sub of submissions) {
        const date = new Date(sub.created_at);
        const roomRaw = sub.answers?.[roomFieldId]?.answer?.trim() || '';
        const room = roomRaw.replace(/reset/i, '').trim();
        if (!room) continue;

        for (const week of weeks) {
          if (date >= week.monday && date <= week.sunday) {
            const key = room + week.label;
            if (/reset/i.test(roomRaw)) {
              roomMap[key] = { reset: date };
            } else {
              if (!roomMap[key] || !roomMap[key].completed || date > roomMap[key].completed) {
                roomMap[key] = { ...(roomMap[key] || {}), completed: date };
              }
            }
            break;
          }
        }
      }

      const scheduleUrls = weeks.map((_, i) => `schedules/Colerain-Week${i + 1}.csv`);
      for (let i = 0; i < weeks.length; i++) {
        try {
          const week = weeks[i];
          const res = await fetch(scheduleUrls[i]);
          const text = await res.text();
          const rows = text.trim().split('\n').slice(1);
          week.total = rows.length;

          for (const row of rows) {
            const parts = row.split(',');
            const room = parts[2]?.trim();
            const key = room + week.label;
            if (room && roomMap[key]?.completed && (!roomMap[key].reset || roomMap[key].completed > roomMap[key].reset)) {
              week.completed++;
            }
          }
        } catch (err) {
          console.warn(`Week ${i + 1} schedule failed to load.`);
        }
      }

      const labels = weeks.map(w => w.label);
      const data = weeks.map(w => w.total ? Math.round((w.completed / w.total) * 100) : 0);

      const ctx = document.getElementById('completionChart').getContext('2d');
      new Chart(ctx, {
        type: 'bar',
        data: {
          labels,
          datasets: [{
            label: '% Completed',
            data,
            backgroundColor: 'rgba(75, 192, 192, 0.6)',
            borderColor: 'rgba(75, 192, 192, 1)',
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          scales: {
            y: {
              beginAtZero: true,
              max: 100,
              title: {
                display: true,
                text: 'Completion %'
              }
            }
          }
        }
      });
    }

    buildChart().catch(err => console.error('Error building chart:', err));
  </script>
</body>
</html>
